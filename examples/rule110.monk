let COLS = 30;

let ALIVE = 1;
let DEAD = 0;

let printGen = fn(gen) {
  let buffer = "";
  for (let i = 0; i < COLS; i = i + 1) {
    if (gen[i] == ALIVE) {
      buffer = buffer + "*";
    }

    if (gen[i] == DEAD) { 
      buffer = buffer + " ";
    }
  }

  puts(buffer);
}

let computeCell = fn(a, b, c) {
  if (a == ALIVE && b == ALIVE && c == ALIVE) {
    return DEAD; 
  }
  if (a == ALIVE && b == ALIVE && c == DEAD) {
    return ALIVE;
  }
  if (a == ALIVE && b == DEAD && c == ALIVE) {
    return ALIVE;
  }
  if (a == ALIVE && b == DEAD && c == DEAD) {
    return DEAD; 
  }
  if (a == DEAD && b == ALIVE && c == ALIVE) {
    return ALIVE;
  }
  if (a == DEAD && b == ALIVE && c == DEAD) {
    return ALIVE;
  }
  if (a == DEAD && b == ALIVE && c == DEAD) {
    return ALIVE;
  }
  if (a == DEAD && b == DEAD && c == ALIVE) {
    return ALIVE;
  }
  if (a == DEAD && b == DEAD && c == DEAD) {
    return DEAD; 
  }
}

let computeNextGen = fn(prev) {
  let new = [];

  for (let i = 1; i < COLS - 1; i = i + 1) {
    push(new, computeCell(prev[i - 1], prev[i], prev[i + 1]))
  }

  return new;
}

let gen = []
for (let i = 0; i < COLS - 1; i++) {
  push(gen, DEAD)
}
push(gen, ALIVE)

for (let i = 0; i < COLS; i++) {
  let new = computeNextGen(gen)
  printGen(new)
  gen = new
}
